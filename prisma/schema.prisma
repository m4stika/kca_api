generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  username String    @id @db.VarChar(50)
  email    String    @unique @db.VarChar(60)
  password String    @db.VarChar(100)
  name     String    @db.VarChar(100)
  Member   Member?
  sessions Session[] @relation("OnlineUsers")
  Anggota  Anggota[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  valid     Boolean  @default(true)
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String   @db.VarChar(50)
  user      User     @relation("OnlineUsers", fields: [username], references: [username], onDelete: Cascade)

  @@map("sessions")
}

model Member {
  id            Int             @id @default(autoincrement())
  username      String          @unique @db.VarChar(50)
  memberId      String          @unique @db.VarChar(30)
  firstName     String          @db.VarChar(50)
  lastName      String?         @db.VarChar(50)
  email         String?         @db.VarChar(50)
  phone         String?         @db.VarChar(20)
  fullAddress   String?         @db.VarChar(200)
  NIP           String?         @db.VarChar(30)
  memberTypeId  Int?
  unitId        Int?
  subUnitId     Int?
  voucherAmount Decimal         @default(0) @db.Decimal(16, 2)
  Addresses     Address[]
  LoanAccount   LoanAccount[]
  MemberType    MemberType?     @relation(fields: [memberTypeId], references: [id])
  SubUnit       SubUnit?        @relation(fields: [subUnitId], references: [id])
  Unit          Unit?           @relation(fields: [unitId], references: [id])
  User          User            @relation(fields: [username], references: [username], onDelete: Cascade)
  SavingAccount SavingAccount[]

  @@map("members")
}

model Address {
  id         Int     @id @default(autoincrement())
  street     String  @db.VarChar(200)
  city       String? @db.VarChar(50)
  province   String? @db.VarChar(50)
  country    String  @db.VarChar(50)
  postalCode String  @db.VarChar(10)
  memberId   Int
  Member     Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model SavingAccount {
  id                       Int          @id @default(autoincrement())
  register_date            DateTime     @db.Date
  principalDeposit         Decimal      @default(0) @db.Decimal(16, 2)
  mandatoryDeposit         Decimal      @default(0) @db.Decimal(16, 2)
  voluntaryDeposit         Decimal      @default(0) @db.Decimal(16, 2)
  otherDeposit             Decimal      @default(0) @db.Decimal(16, 2)
  savingAmount             Decimal      @default(0) @db.Decimal(16, 2)
  voluntaryWithdrawalLimit Decimal      @default(0) @db.Decimal(16, 2)
  otherWithdrawalLimit     Decimal      @default(0) @db.Decimal(16, 2)
  withdrawalLimit          Decimal      @default(0) @db.Decimal(16, 2)
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
  memberId                 Int
  Deposit                  Deposit[]
  Member                   Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  Withdrawal               Withdrawal[]

  @@map("saving_accounts")
}

model Deposit {
  id               Int           @id @default(autoincrement())
  savingAccountId  Int
  deposit_date     DateTime      @db.Date
  principalDeposit Decimal       @default(0) @db.Decimal(16, 2)
  mandatoryDeposit Decimal       @default(0) @db.Decimal(16, 2)
  voluntaryDeposit Decimal       @default(0) @db.Decimal(16, 2)
  otherDeposit     Decimal       @default(0) @db.Decimal(16, 2)
  depositAmount    Decimal       @default(0) @db.Decimal(16, 2)
  SavingAccount    SavingAccount @relation(fields: [savingAccountId], references: [id])

  @@map("deposits")
}

model Withdrawal {
  id                  Int           @id @default(autoincrement())
  savingAccountId     Int
  withdrawal_date     DateTime      @db.Date
  voluntaryWithdrawal Decimal       @default(0) @db.Decimal(16, 2)
  otherWithdrawal     Decimal       @default(0) @db.Decimal(16, 2)
  withdrawalAmount    Decimal       @default(0) @db.Decimal(16, 2)
  SavingAccount       SavingAccount @relation(fields: [savingAccountId], references: [id])

  @@map("withdrawals")
}

model LoanAccount {
  id                   Int           @id @default(autoincrement())
  memberId             Int
  register_date        DateTime      @db.Date
  loanAmount           Decimal       @default(0) @db.Decimal(16, 2)
  loanTerm             Int           @default(12) @db.SmallInt
  interestPercent      Int           @default(0) @db.TinyInt
  installmentValue     Decimal       @default(0) @db.Decimal(16, 2)
  installmentPrincipal Decimal       @default(0) @db.Decimal(16, 2)
  installmentInterest  Decimal       @default(0) @db.Decimal(16, 2)
  principalPaid        Decimal       @default(0) @db.Decimal(16, 2)
  interestPaid         Decimal       @default(0) @db.Decimal(16, 2)
  paidValue            Decimal       @default(0) @db.Decimal(16, 2)
  principalBalance     Decimal       @default(0) @db.Decimal(16, 2)
  interestBalance      Decimal       @default(0) @db.Decimal(16, 2)
  loanBalance          Decimal       @default(0) @db.Decimal(16, 2)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  Member               Member        @relation(fields: [memberId], references: [id])
  LoanPayment          LoanPayment[]

  @@map("loan_accounts")
}

model LoanPayment {
  id             Int         @id @default(autoincrement())
  loanAccountId  Int
  payment_date   DateTime    @db.Date
  installmentTo  Int         @default(0) @db.SmallInt
  principalValue Decimal     @default(0) @db.Decimal(16, 2)
  interestValue  Decimal     @default(0) @db.Decimal(16, 2)
  amount         Decimal     @default(0) @db.Decimal(16, 2)
  LoanAccount    LoanAccount @relation(fields: [loanAccountId], references: [id])

  @@map("loan_payments")
}

model MemberType {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(30)
  Member Member[]

  @@map("member_types")
}

model Unit {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(30)
  Member Member[]

  @@map("units")
}

model SubUnit {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(30)
  Member Member[]

  @@map("sub_units")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Anggota {
  // id           Int     @id @default(autoincrement())
  noAnggota    String     @id() @db.VarChar(50)
  User         User       @relation(fields: [noAnggota], references: [username])
  nip          String     @db.VarChar(15)
  namaunit     String     @db.VarChar(50)
  namasub      String     @db.VarChar(50)
  keterangan   String?    @db.VarChar(50)
  namaAnggota  String     @db.VarChar(50)
  alamat       String     @db.VarChar(100)
  telp         String?    @db.VarChar(15)
  kelamin      String     @db.VarChar(1)
  kodebank     String?    @db.VarChar(5)
  cabang       String?    @db.VarChar(100)
  norek        String?    @db.VarChar(50)
  namarek      String?    @db.VarChar(100)
  saldoVoucher Decimal    @db.Decimal(16, 2)
  Pinjaman     Pinjaman[]
  Simpanan     Simpanan[]
  Order        Order[]

  @@map("anggota")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Pinjaman {
  refCode         String            @id @unique @db.UniqueIdentifier
  noAnggota       String            @db.VarChar(50)
  Anggota         Anggota           @relation(fields: [noAnggota], references: [noAnggota])
  tglPinjam       DateTime          @db.Date
  isPinjamanUang  Boolean           @default(true)
  bulan           Int               @db.SmallInt
  tahun           Int               @db.SmallInt
  nilaiPinjaman   Decimal           @db.Decimal(16, 2)
  jangkaWaktu     Int               @db.SmallInt
  jenisBunga      String            @db.VarChar(7)
  persenBunga     Decimal           @db.Decimal(6, 2)
  biayaAdmin      Decimal           @db.Decimal(16, 2)
  tanggalLunas    DateTime?         @db.Date
  lunas           String            @db.VarChar(1)
  RincianPinjaman RincianPinjaman[]

  @@map("pinjaman")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model RincianPinjaman {
  refCode    String    @db.UniqueIdentifier
  Pinjaman   Pinjaman  @relation(fields: [refCode], references: [refCode])
  angKe      Int       @db.SmallInt
  bulan      Int       @db.SmallInt
  tahun      Int       @db.SmallInt
  rpPinjaman Decimal   @db.Decimal(16, 2)
  rpBunga    Decimal   @db.Decimal(16, 2)
  rpBayar    Decimal   @db.Decimal(16, 2)
  blnLunas   Int?      @db.SmallInt
  thnLunas   Int?      @db.SmallInt
  tglLunas   DateTime? @db.Date
  lunas      String    @db.VarChar(1)
  keterangan String?   @db.VarChar(50)

  @@unique([refCode, angKe])
  @@map("rincian_pinjaman")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Simpanan {
  noAnggota    String  @unique @db.VarChar(50)
  Anggota      Anggota @relation(fields: [noAnggota], references: [noAnggota])
  namaAnggota  String? @db.VarChar(50)
  totalPokok   Decimal @db.Decimal(16, 2)
  totalWajib   Decimal @db.Decimal(16, 2)
  sisaSukarela Decimal @db.Decimal(16, 2)
  totalSaldo   Decimal @db.Decimal(16, 2)

  @@map("simpanan")
}

model Barang {
  kodeBarang  String        @id @unique @db.VarChar(5)
  barcode     String?       @db.VarChar(15)
  namaJenis   String        @db.VarChar(50)
  namaBarang  String        @db.VarChar(100)
  satuan      String        @db.VarChar(10)
  stok        Decimal       @db.Decimal(16, 2)
  hargaJual   Decimal       @db.Decimal(16, 2)
  fileName    String        @default("noname.png") @db.VarChar(50)
  OrderDetail OrderDetail[]

  @@map("barang")
}

model Order {
  id              Int           @id @default(autoincrement())
  invoiceNo       String?       @db.VarChar(20)
  transactionType String        @default("Belanja") @db.VarChar(30)
  noAnggota       String        @db.VarChar(50)
  Anggota         Anggota?      @relation(fields: [noAnggota], references: [noAnggota])
  transactionDate DateTime      @db.Date
  orderStatus     String        @db.VarChar(20)
  shippingMethod  String?       @db.VarChar(20)
  paymentMethod   String?       @db.VarChar(20)
  amount          Decimal       @default(0) @db.Decimal(16, 2)
  remark          String        @db.VarChar(100)
  notes           String        @db.VarChar(200)
  OrderDetail     OrderDetail[]

  @@map("orders")
}

model OrderDetail {
  parentId   Int
  index      Int
  Order      Order   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  kodeBarang String  @db.VarChar(5)
  Barang     Barang  @relation(fields: [kodeBarang], references: [kodeBarang])
  price      Decimal @default(0) @db.Decimal(16, 2)
  qty        Int     @default(1)

  @@unique([parentId, index])
  @@map("order_details")
}

model Promotion {
  id     Int     @id @default(autoincrement())
  source String  @db.VarChar(100)
  active Boolean @default(true)

  @@map("promotions")
}
